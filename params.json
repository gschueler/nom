{"google":"","body":"# nom\r\n\r\nnom is \"no markup\" or XML without the cursing.\r\n\r\n(aka Markdown for XML)\r\n\r\nIf you *must* produce XML, nom is meant to be the easiest way to write it by hand.\r\n\r\nBeta to see how useful it is.\r\n\r\n# what\r\n\r\nWrite XML documents in a simpler form and then convert them to XML.\r\n\r\nStructure is created by indentation, not angle brackets. Increases clarity, reduces noise.\r\n\r\ninput: \r\n\r\n    a\r\n        b\r\n            c\r\n\r\noutput:\r\n\r\n    <a>\r\n      <b>\r\n        <c></c>\r\n      </b>\r\n    </a>\r\n\r\n\r\nAttributes can be specified on the same line as the element name, or on their own line, and can be prefixed with '@':\r\n\r\n    a this=that\r\n        @that something else\r\n        those=another thing\r\n\r\nyields:\r\n    \r\n    <a this='that' that='something else' those='another thing'></a>\r\n\r\nText content can be on the same line, as long as it doesn't contain `attribute=value`\r\n\r\n    a This is all it <looks like>\r\n\r\nyields:\r\n\r\n    <a>This is all it &lt;looks like&gt;</a>\r\n\r\nText can be on separate lines, just use a colon at the start, and indentation doesn't matter:\r\n\r\n    a\r\n        b\r\n    :text inside b\r\n        :more text inside b\r\n\r\nyields:\r\n    \r\n    <a>\r\n      <b>text inside b\r\n    more text inside b</b>\r\n    </a>\r\n\r\n# why\r\n\r\nNot sure I need to justify this. Try writing XML by hand.  Try writing nom.\r\n\r\n# why not yaml\r\n\r\nYaml and XML don't quite map to each other (see [yaxml](http://yaml.org/xml.html)).  XML has attributes as well as subelements, and can have multiple elements of the same name in the same context. We also want a simple way of expressing textual content, as well as comments.  Yaml is great for expressing structured data, but not great for mapping to XML, nor particularly for writing by hand.\r\n\r\n# syntax detail\r\n\r\nEmpty lines are ignored.\r\n\r\n## elements\r\n\r\n    element(:)? [attr=value]+ | <text>\r\n\r\nEach element is indented by some multiple of 4 space characters, X. If X is greater than the previous line's indentation, this line is a sub element of the previous element.  If X is less than the previous line's indentation, this element is a sub element of next higher element that has a lower indentation.\r\n\r\nIf the remaining text on the line contains any text like \"attribute=value\", then these are treated as attributes, and values can be quoted or not, and may contain spaces.\r\n\r\nOtherwise the remaining text is treated as text content of the element.\r\n\r\nA comment may be added on the same line as an element.\r\n\r\nIf there is a single top-level element, it is used as the document root element.\r\n\r\nIf there are multiple top-level elements, they are made subordinate to a default root element.  Currently the default root element is named \"root\", but this should be an input option.\r\n\r\n## Attributes\r\n\r\n    @attribute <value>\r\n    @attribute=<value>\r\n    attribute=<value>\r\n\r\nAttributes are added to the previous element, no matter the indentation. If you use the `@` sign you do not need an equals sign at the end of the attribute name.\r\n\r\n## Comment\r\n\r\n    #<text>\r\n\r\nComments can be at any indentation.\r\n\r\nIf you use two hash charaters, the comment is included as an XML comment in the output:\r\n\r\n    ##<xml comment>\r\n\r\n## Text content\r\n\r\nEither use the `element <text>` format, or specify text on its own line:\r\n\r\n    :<text>\r\n\r\nText content is added to the previous element, no matter the indentation.\r\n\r\n\r\n# Examples\r\n\r\nnom:\r\n\r\n    script:\r\n    \r\n        @author Greg Schueler\r\n        @date 2/15/2012\r\n        \r\n        title: nom: the story of nom\r\n        \r\n        subtitle: just trying to clean up the world, one bit at a time\r\n        \r\n        scene:  number=1 act=1\r\n        \r\n            setting: type=interior lighting=dark air=hazy\r\n\r\n            dialog\r\n                voiceover\r\n                    :Somewhere, on the internet...\r\n            \r\n                speaker name=Greg\r\n                    :What is wrong with the world? Why it so fugly?\r\n                \r\n                speaker name=Anthony\r\n                    :I don't know, Greg. What is your problem?\r\n                    \r\n                speaker name=Greg\r\n                    :I'd like to mock up an XML document in a reasonable way.\r\n                    :But I'd really love not to use the full syntax.\r\n                \r\n            cut-to\r\n                image A lightbulb lighting up.\r\n                                        \r\n            montage style=1980s\r\n                : A man hacks at a keyboard into the wee hours of the night.\r\n\r\n            cut-to\r\n                close-up A neon green font on a black terminal screen.\r\n                    : The text says \"git push origin master\"\r\n            \r\n            cut-to\r\n                close-up A keyboard.\r\n                    : A finger pushes the enter key.\r\n            \r\n            titles: Teh end...\r\n\r\nxml:\r\n\r\n    <script author='Greg Schueler' date='2/15/2012'>\r\n      <title>nom: the story of nom</title>\r\n      <subtitle>just trying to clean up the world, one bit at a time</subtitle>\r\n      <scene number='1' act='1'>\r\n        <setting type='interior' lighting='dark' air='hazy'></setting>\r\n        <dialog>\r\n          <voiceover>Somewhere, on the internet...</voiceover>\r\n          <speaker name='Greg'>What is wrong with the world? Why it so fugly?</speaker>\r\n          <speaker name='Anthony'>I don't know, Greg. What is your problem?</speaker>\r\n          <speaker name='Greg'>I'd like to mock up an XML document in a reasonable way.\r\n    But I'd really love not to use the full syntax.</speaker>\r\n        </dialog>\r\n        <cut-to>\r\n          <image>A lightbulb lighting up.</image>\r\n        </cut-to>\r\n        <montage style='1980s'> A man hacks at a keyboard into the wee hours of the night.</montage>\r\n        <cut-to>\r\n          <close-up>A neon green font on a black terminal screen.\r\n     The text says \"git push origin master\"</close-up>\r\n        </cut-to>\r\n        <cut-to>\r\n          <close-up>A keyboard.\r\n     A finger pushes the enter key.</close-up>\r\n        </cut-to>\r\n        <titles>Teh end...</titles>\r\n      </scene>\r\n    </script>\r\n\r\n# Usage\r\n\r\n    groovy nom.groovy [-rev] < file > out\r\n    ruby nom.rb < file > out\r\n\r\nNormal usage takes nom input and produces XML.\r\n\r\nSpecifying `-rev` will convert XML to nom.\r\n\r\n# TODO\r\n\r\n* add a reverser to get nom from XML\r\n    * add to groovy impl (done)\r\n    * add to ruby impl\r\n* config options\r\n* ...profit?\r\n","note":"Don't delete this file! It's used internally to help with page regeneration.","name":"Nom","tagline":"nom is no markup xml"}